---
export interface Props {
    id: string;
    type: 'user' | 'attribute' | 'secret' | 'role';
}

const { id, type } = Astro.props;
---

<div id={`edit-popup-${id}`} class="fixed inset-0 bg-black/50 items-center justify-center z-50 hidden" style="display: none;">
    <div class="bg-dark-blue border border-neon-blue/30 rounded-lg p-6 w-full max-w-md">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-xl font-orbitron text-white">
                Edit {type === 'user' ? 'User' : 
                     type === 'attribute' ? 'User Attribute' : 
                     type === 'secret' ? 'API Secret' : 'Role'}
            </h3>
            <button class="close-popup text-gray-400 hover:text-white">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>
        
        <div class="form-content">
            {type === 'user' && (
                <div class="space-y-4">
                    <div>
                        <label for="name" class="block text-sm font-medium text-gray-300 mb-1">Name</label>
                        <input type="text" id="name" name="name" class="w-full bg-dark-blue/70 border border-neon-blue/30 rounded-md px-3 py-2 text-white focus:outline-none focus:border-neon-blue">
                    </div>
                    <div>
                        <label for="email" class="block text-sm font-medium text-gray-300 mb-1">Email</label>
                        <input type="email" id="email" name="email" class="w-full bg-dark-blue/70 border border-neon-blue/30 rounded-md px-3 py-2 text-white focus:outline-none focus:border-neon-blue">
                    </div>
                    <div>
                        <label for="role" class="block text-sm font-medium text-gray-300 mb-1">Role</label>
                        <select id="role" name="role" class="w-full bg-dark-blue/70 border border-neon-blue/30 rounded-md px-3 py-2 text-white focus:outline-none focus:border-neon-blue">
                            <option value="Admin">Admin</option>
                            <option value="Developer">Developer</option>
                            <option value="User">User</option>
                        </select>
                    </div>
                </div>
            )}
            
            {type === 'attribute' && (
                <div class="space-y-4">
                    <div>
                        <label for="name" class="block text-sm font-medium text-gray-300 mb-1">Name</label>
                        <input type="text" id="name" name="name" class="w-full bg-dark-blue/70 border border-neon-blue/30 rounded-md px-3 py-2 text-white focus:outline-none focus:border-neon-blue">
                    </div>
                    <div>
                        <label for="type" class="block text-sm font-medium text-gray-300 mb-1">Type</label>
                        <select id="type" name="type" class="w-full bg-dark-blue/70 border border-neon-blue/30 rounded-md px-3 py-2 text-white focus:outline-none focus:border-neon-blue">
                            <option value="string">String</option>
                            <option value="number">Number</option>
                            <option value="boolean">Boolean</option>
                            <option value="object">Object</option>
                            <option value="array">Array</option>
                        </select>
                    </div>
                    <div>
                        <label for="required" class="block text-sm font-medium text-gray-300 mb-1">Required</label>
                        <div class="flex items-center">
                            <input type="checkbox" id="required" name="required" class="h-4 w-4 text-neon-blue focus:ring-neon-blue border-gray-300 rounded">
                            <label for="required" class="ml-2 block text-sm text-gray-300">This attribute is required</label>
                        </div>
                    </div>
                    <div>
                        <label for="description" class="block text-sm font-medium text-gray-300 mb-1">Description</label>
                        <textarea id="description" name="description" rows="3" class="w-full bg-dark-blue/70 border border-neon-blue/30 rounded-md px-3 py-2 text-white focus:outline-none focus:border-neon-blue"></textarea>
                    </div>
                </div>
            )}
            
            {type === 'secret' && (
                <div class="space-y-4">
                    <div>
                        <label for="name" class="block text-sm font-medium text-gray-300 mb-1">Name</label>
                        <input type="text" id="name" name="name" class="w-full bg-dark-blue/70 border border-neon-blue/30 rounded-md px-3 py-2 text-white focus:outline-none focus:border-neon-blue">
                    </div>
                    <div>
                        <p class="text-sm text-gray-400">ID: <span id="secret-id" class="text-white"></span></p>
                        <p class="text-sm text-gray-400">Created: <span id="secret-created" class="text-white"></span></p>
                        <p class="text-sm text-gray-400">Last Used: <span id="secret-lastused" class="text-white"></span></p>
                    </div>
                </div>
            )}
            
            {type === 'role' && (
                <div class="space-y-4">
                    <div>
                        <label for="name" class="block text-sm font-medium text-gray-300 mb-1">Name</label>
                        <input type="text" id="name" name="name" class="w-full bg-dark-blue/70 border border-neon-blue/30 rounded-md px-3 py-2 text-white focus:outline-none focus:border-neon-blue">
                    </div>
                    <div>
                        <label for="permissions" class="block text-sm font-medium text-gray-300 mb-1">Permissions</label>
                        <div class="space-y-2 bg-dark-blue/70 border border-neon-blue/30 rounded-md p-3">
                            <div class="flex items-center">
                                <input type="checkbox" id="read-all" name="permissions" value="read:all" class="h-4 w-4 text-neon-blue focus:ring-neon-blue border-gray-300 rounded">
                                <label for="read-all" class="ml-2 block text-sm text-gray-300">read:all</label>
                            </div>
                            <div class="flex items-center">
                                <input type="checkbox" id="write-all" name="permissions" value="write:all" class="h-4 w-4 text-neon-blue focus:ring-neon-blue border-gray-300 rounded">
                                <label for="write-all" class="ml-2 block text-sm text-gray-300">write:all</label>
                            </div>
                            <div class="flex items-center">
                                <input type="checkbox" id="delete-all" name="permissions" value="delete:all" class="h-4 w-4 text-neon-blue focus:ring-neon-blue border-gray-300 rounded">
                                <label for="delete-all" class="ml-2 block text-sm text-gray-300">delete:all</label>
                            </div>
                            <div class="flex items-center">
                                <input type="checkbox" id="read-own" name="permissions" value="read:own" class="h-4 w-4 text-neon-blue focus:ring-neon-blue border-gray-300 rounded">
                                <label for="read-own" class="ml-2 block text-sm text-gray-300">read:own</label>
                            </div>
                            <div class="flex items-center">
                                <input type="checkbox" id="write-own" name="permissions" value="write:own" class="h-4 w-4 text-neon-blue focus:ring-neon-blue border-gray-300 rounded">
                                <label for="write-own" class="ml-2 block text-sm text-gray-300">write:own</label>
                            </div>
                        </div>
                    </div>
                </div>
            )}
        </div>
        
        <div class="flex justify-end space-x-3 mt-6">
            <button class="close-popup px-4 py-2 bg-gray-700 text-white rounded-md hover:bg-gray-600 transition-colors duration-300">
                Cancel
            </button>
            <button class="save-changes px-4 py-2 bg-neon-blue text-dark-blue rounded-md hover:bg-opacity-80 transition-colors duration-300">
                Save Changes
            </button>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Get all edit buttons and attach event listeners
        const editButtons = document.querySelectorAll('.edit-item-btn');
        const closeButtons = document.querySelectorAll('.close-popup');
        const saveButtons = document.querySelectorAll('.save-changes');
        
        // Open popup when edit button is clicked
        editButtons.forEach(button => {
            button.addEventListener('click', () => {
                const itemId = button.getAttribute('data-id');
                const itemType = button.getAttribute('data-type');
                const popup = document.getElementById(`edit-popup-${itemId}`);
                
                if (popup) {
                    // Populate form with data
                    const itemData = button.getAttribute('data-item');
                    if (itemData) {
                        const item = JSON.parse(itemData);
                        populateForm(itemType || '', item);
                    }
                    
                    // Show popup
                    popup.style.display = 'flex';
                }
            });
        });
        
        // Close popup when close button is clicked
        closeButtons.forEach(button => {
            button.addEventListener('click', () => {
                const popup = button.closest('[id^="edit-popup-"]') as HTMLElement;
                if (popup) {
                    popup.style.display = 'none';
                }
            });
        });
        
        // Handle save changes
        saveButtons.forEach(button => {
            button.addEventListener('click', () => {
                const popup = button.closest('[id^="edit-popup-"]') as HTMLElement;
                if (popup) {
                    // Here you would collect form data and send to your backend
                    // For now, just close the popup
                    popup.style.display = 'none';
                    
                    // You could emit a custom event that the parent component can listen for
                    const itemId = popup.id.replace('edit-popup-', '');
                    const event = new CustomEvent('itemUpdated', {
                        detail: {
                            id: itemId,
                            // Add collected form data here
                        }
                    });
                    document.dispatchEvent(event);
                }
            });
        });
        
        // Helper function to populate form with data
        function populateForm(type: string, item: any) {
            if (type === 'user') {
                const nameInput = document.getElementById('name') as HTMLInputElement;
                const emailInput = document.getElementById('email') as HTMLInputElement;
                const roleInput = document.getElementById('role') as HTMLSelectElement;
                
                if (nameInput) nameInput.value = item.name || '';
                if (emailInput) emailInput.value = item.email || '';
                if (roleInput) roleInput.value = item.role || 'User';
            } else if (type === 'attribute') {
                const nameInput = document.getElementById('name') as HTMLInputElement;
                const typeInput = document.getElementById('type') as HTMLSelectElement;
                const requiredInput = document.getElementById('required') as HTMLInputElement;
                const descriptionInput = document.getElementById('description') as HTMLTextAreaElement;
                
                if (nameInput) nameInput.value = item.name || '';
                if (typeInput) typeInput.value = item.type || 'string';
                if (requiredInput) requiredInput.checked = item.required || false;
                if (descriptionInput) descriptionInput.value = item.description || '';
            } else if (type === 'secret') {
                const nameInput = document.getElementById('name') as HTMLInputElement;
                const secretIdElement = document.getElementById('secret-id');
                const secretCreatedElement = document.getElementById('secret-created');
                const secretLastUsedElement = document.getElementById('secret-lastused');
                
                if (nameInput) nameInput.value = item.name || '';
                if (secretIdElement) secretIdElement.textContent = item.id || '';
                if (secretCreatedElement) secretCreatedElement.textContent = item.created || '';
                if (secretLastUsedElement) secretLastUsedElement.textContent = item.lastUsed || '';
            } else if (type === 'role') {
                const nameInput = document.getElementById('name') as HTMLInputElement;
                if (nameInput) nameInput.value = item.name || '';
                
                // Clear all checkboxes first
                document.querySelectorAll('input[name="permissions"]').forEach((checkbox: Element) => {
                    (checkbox as HTMLInputElement).checked = false;
                });
                
                // Check the ones that match the role's permissions
                if (item.permissions && Array.isArray(item.permissions)) {
                    item.permissions.forEach((permission: string) => {
                        const checkbox = document.querySelector(`input[value="${permission}"]`) as HTMLInputElement;
                        if (checkbox) {
                            checkbox.checked = true;
                        }
                    });
                }
            }
        }
    });
</script>
