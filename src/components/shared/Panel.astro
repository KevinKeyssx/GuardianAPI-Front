---
import AddIcon          from '@/icons/AddIcon.astro';
import CloseIcon        from '@/icons/CloseIcon.astro';
import OpenPanelIcon    from '@/icons/OpenPanelIcon.astro';


export interface Props {
    id                  : string;
    title               : string;
    saveButtonText?     : string;
    cancelButtonText?   : string;
    buttonText?         : string;
    buttonClass?        : string;
    isEdit?:             boolean;
}


const { 
    id, 
    title,
    saveButtonText      = "Save",
    cancelButtonText    = "Cancel",
    buttonText          = "Open Panel",
    buttonClass         = "px-4 py-2 bg-neon-blue text-dark-blue rounded-md hover:bg-opacity-80 transition-colors duration-300 flex items-center",
    isEdit              = false
} = Astro.props;
---
<!-- Button to open the panel -->
<button id={`open-panel-${id}`} class={`open-panel-btn h-10 gap-1 ${buttonClass} ${isEdit ? 'text-neon-blue' : ''}`}>
    { isEdit ? <OpenPanelIcon /> : <AddIcon/> }

    <span class="hidden sm:block">
        { buttonText }
    </span>
</button>

<!-- Panel container -->
<aside
    id={`panel-container-${id}`}
    class="fixed inset-0 bg-space-blue/10 backdrop-blur-sm items-end justify-end sm:items-center sm:justify-end z-[9999] hidden opacity-0 transition-all duration-300 ease-in-out"
    style="display: none; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh;"
>
    <section
        id={`panel-${id}`}
        class="bg-dark-blue/80 border-l border-neon-blue/30 h-full w-full max-w-md transform translate-x-full transition-all duration-300 ease-in-out flex flex-col overflow-hidden absolute right-0 top-0"
    >
        <header class="flex justify-between items-center px-6 py-4 border-b border-neon-blue/30">
            <h3 class="text-xl font-orbitron text-white">{title}</h3>

            <button aria-label="Cerrar panel" class="close-panel text-gray-400 hover:text-white">
                <CloseIcon />
            </button>
        </header>

        <main class="p-6 flex-grow overflow-y-auto">
            <slot />
        </main>

        <footer class="flex justify-end space-x-3 p-4 border-t border-neon-blue/30 bg-dark-blue/90 sticky bottom-0">
            <button class="close-panel px-4 py-2 bg-gray-700 text-white rounded-md hover:bg-gray-600 transition-colors duration-300">
                {cancelButtonText}
            </button>

            <button class="save-panel px-4 py-2 bg-neon-blue text-dark-blue rounded-md hover:bg-opacity-80 transition-colors duration-300">
                {saveButtonText}
            </button>
        </footer>
    </section>
</aside>

<script define:vars={{ id }}>
    ( function() {
        function openPanel() {
            const panelContainer    = document.getElementById( `panel-container-${id}` );
            const panel             = document.getElementById( `panel-${id}` );

            if ( panelContainer && panel ) {
                // Mover el panel al body para asegurar que estÃ© fuera de cualquier contenedor
                document.body.appendChild(panelContainer);
                panelContainer.style.display = 'flex';

                setTimeout(() => {
                    panelContainer.classList.add( 'opacity-100' );
                    panel.classList.remove( 'translate-x-full' );
                    panel.classList.add( 'translate-x-0' );
                }, 10 );
            }
        }

        function closePanel() {
            const panelContainer = document.getElementById(`panel-container-${id}`);
            const panel = document.getElementById(`panel-${id}`);

            if (panelContainer && panel) {
                panelContainer.classList.remove( 'opacity-100' );
                panel.classList.remove( 'translate-x-0' );
                panel.classList.add( 'translate-x-full' );

                setTimeout(() => {
                    panelContainer.style.display = 'none';
                }, 300);
            }
        }

        function initPanelListeners() {
            const openButton = document.getElementById( `open-panel-${id}` );

            if ( openButton ) {
                openButton.removeEventListener( 'click', openPanel );
                openButton.addEventListener( 'click', openPanel );
            }

            const closeButtons  = document.querySelectorAll( `#panel-container-${id} .close-panel` );
            const saveButton    = document.querySelector( `#panel-container-${id} .save-panel` );

            closeButtons.forEach( button => {
                button.removeEventListener( 'click', closePanel );
                button.addEventListener( 'click', closePanel );
            });

            if ( saveButton ) {
                const saveHandler = () => {
                    const saveEvent = new CustomEvent( 'panel:save', {
                        detail: { panelId: id }
                    });
                    document.dispatchEvent( saveEvent );

                    closePanel();
                };

                saveButton.removeEventListener( 'click', saveHandler );
                saveButton.addEventListener( 'click', saveHandler );
            }

            const panelContainer = document.getElementById( `panel-container-${id}` );

            if ( panelContainer ) {
                const outsideClickHandler = (e) => {
                    if ( e.target === panelContainer ) {
                        closePanel();
                    }
                };

                panelContainer.removeEventListener( 'click', outsideClickHandler );
                panelContainer.addEventListener( 'click', outsideClickHandler );
            }
        }

        document.addEventListener( 'DOMContentLoaded', initPanelListeners );
        document.addEventListener( 'astro:page-load', initPanelListeners );

        window[`openPanel_${id}`]   = openPanel;
        window[`closePanel_${id}`]  = closePanel;
    })();
</script>
