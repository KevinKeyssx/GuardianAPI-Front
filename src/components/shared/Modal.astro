---
import CloseIcon from '@/icons/CloseIcon.astro';

export interface Props {
    id              : string;
    type            : 'user' | 'attribute' | 'secret' | 'role';
    title           : string;
    buttonText?     : string;
    buttonClass?    : string;
    isEdit?         : boolean;
}

const { 
    id, 
    type,
    title,
    buttonText  = 'Open',
    buttonClass = 'px-4 py-2 bg-neon-blue text-dark-blue rounded-md hover:bg-opacity-80 transition-colors duration-300 flex items-center',
    isEdit      = false
} = Astro.props;
---

<!-- Botón para abrir el popup -->
<button id={`open-popup-${id}`} class={`edit-item-btn h-10 gap-1 ${buttonClass}`} data-id={id} data-type={type}>
    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>

    <span class="hidden sm:block">
        {buttonText}
    </span>
</button>

<!-- El popup -->
<section id={`edit-popup-${id}`} class="animate-fade-in fixed inset-0 bg-space-blue/10 backdrop-blur-sm items-center justify-center z-[9999] hidden opacity-0 transition-all duration-300 ease-in-out" style="display: none; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh;">
    <div class="bg-dark-blue/80 border border-neon-blue/30 rounded-lg p-6 w-full max-w-md transform scale-95 transition-all duration-300 ease-in-out absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2">
        <header class="flex justify-between items-center mb-4">
            <h3 class="text-xl font-orbitron text-white px-4 py-2">
                {title}
            </h3>
            <button class="close-popup text-gray-400 hover:text-white">
                <CloseIcon />
            </button>
        </header>

        <main class="form-content">
            <slot />
        </main>

        <footer class="flex justify-end space-x-3 mt-6">
            <button class="close-popup px-4 py-2 bg-gray-700 text-white rounded-md hover:bg-gray-600 transition-colors duration-300">
                Cancel
            </button>
            <button class="save-changes px-4 py-2 bg-neon-blue text-dark-blue rounded-md hover:bg-opacity-80 transition-colors duration-300">
                Save Changes
            </button>
        </footer>
    </div>
</section>

<script define:vars={{ id }}>
    // Usamos una función auto-ejecutable para evitar conflictos de nombres
    (function() {
        // Función para inicializar los event listeners
        function initPopupListeners() {
        // Get all buttons and attach event listeners
        const editButtons = document.querySelectorAll('.edit-item-btn');
        const closeButtons = document.querySelectorAll('.close-popup');
        const saveButtons = document.querySelectorAll('.save-changes');
        
        // Open popup when edit button is clicked
        editButtons.forEach(button => {
            button.addEventListener('click', () => {
                const itemId = button.getAttribute('data-id');
                const itemType = button.getAttribute('data-type');
                const popup = document.getElementById(`edit-popup-${itemId}`);

                if (popup) {
                    // Populate form with data
                    const itemData = button.getAttribute('data-item');
                    if (itemData) {
                        try {
                            const item = JSON.parse(itemData);
                            populateForm(itemType || '', item);
                        } catch (e) {
                            console.error('Error parsing item data:', e);
                        }
                    }

                    // Show popup with animation
                    popup.style.display = 'flex';
                    // Asegurar que el modal esté en el body
                    document.body.appendChild(popup);
                    // Trigger animation after a small delay to ensure the display change has taken effect
                    setTimeout(() => {
                        popup.classList.add('bg-space-blue/10');
                        popup.classList.add('backdrop-blur-sm');
                        popup.classList.add('opacity-100');
                        const popupContent = popup.querySelector('.bg-dark-blue');
                        if (popupContent) {
                            popupContent.classList.remove('scale-95');
                            popupContent.classList.add('scale-100');
                        }
                    }, 10);
                }
            });
        });

        // Close popup when close button is clicked
        closeButtons.forEach(button => {
            button.addEventListener('click', () => {
                const popup = button.closest('[id^="edit-popup-"]');
                if (popup) {
                    // Hide popup with animation
                    popup.classList.remove('bg-space-blue/10');
                    popup.classList.remove('backdrop-blur-sm');
                    popup.classList.remove('opacity-100');
                    popup.classList.add('bg-black/0');
                    popup.classList.add('opacity-0');
                    const popupContent = popup.querySelector('.bg-dark-blue');
                    if (popupContent) {
                        popupContent.classList.remove('scale-100');
                        popupContent.classList.add('scale-95');
                    }
                    // Hide the popup after the animation completes
                    setTimeout(() => {
                        popup.style.display = 'none';
                    }, 300);
                }
            });
        });

        // También podemos cerrar el popup haciendo clic fuera del contenido
        document.addEventListener('click', (event) => {
            const target = event.target;
            if (target && 'classList' in target && 'id' in target && 'style' in target) {
                if (target.classList.contains('fixed') && target.id.startsWith('edit-popup-')) {
                    target.style.display = 'none';
                }
            }
        });

        // Handle save changes
        saveButtons.forEach(button => {
            button.addEventListener('click', () => {
                const popup = button.closest('[id^="edit-popup-"]');
                if (popup) {
                    // Here you would collect form data and send to your backend
                    // For now, just close the popup
                    // Hide popup with animation
                    popup.classList.remove('bg-space-blue/10');
                    popup.classList.remove('backdrop-blur-sm');
                    popup.classList.remove('opacity-100');
                    popup.classList.add('bg-black/0');
                    popup.classList.add('opacity-0');
                    const popupContent = popup.querySelector('.bg-dark-blue');
                    if (popupContent) {
                        popupContent.classList.remove('scale-100');
                        popupContent.classList.add('scale-95');
                    }
                    // Hide the popup after the animation completes
                    setTimeout(() => {
                        popup.style.display = 'none';
                    }, 300);
                    
                    // You could emit a custom event that the parent component can listen for
                    const itemId = popup.id.replace('edit-popup-', '');
                    const event = new CustomEvent('itemUpdated', {
                        detail: {
                            id: itemId,
                            // Add collected form data here
                        }
                    });
                    document.dispatchEvent(event);
                }
            });
        });
    }
    
    // Inicializar los event listeners cuando se carga la página
    document.addEventListener('DOMContentLoaded', initPopupListeners);
    
    // También inicializar cuando cambia la vista con Astro View Transitions
    document.addEventListener('astro:page-load', initPopupListeners);
    
    // Inicializar inmediatamente en caso de que el DOM ya esté cargado
    if (document.readyState === 'complete' || document.readyState === 'interactive') {
        initPopupListeners();
    }
    })();
</script>
