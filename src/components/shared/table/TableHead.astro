---
import ConfigIcon from '@/icons/ConfigIcon.astro';
import Dropdown from '@/components/shared/dropdown/Dropdown.astro';
import ColumnToggle from './ColumnToggle.svelte';

export interface Props {
    columns: string[];
}

const { columns } = Astro.props;
---

<thead class="bg-dark-blue/70 font-orbitron">
    <tr>
        {columns.map((column, index) => (
            <th 
                scope="col" 
                class={`${column === 'Actions' ? 'sticky bg-dark-blue/90 backdrop-blur-sm shadow-[-4px_0_5px_rgba(0,0,0,0.3)] right-0 z-10 text-center flex justify-center px-4' : 'px-6'} py-3 text-left text-xs font-medium text-neon-blue uppercase tracking-wider`}
                data-column-name={column}
            >
                {column === 'Actions' ? (
                    <Dropdown id="column-visibility" position="right" width="w-56" menuClass="p-0">
                        <button slot="trigger" class="p-1 rounded-full hover:bg-neon-blue/20 transition-colors duration-200">
                            <ConfigIcon />
                        </button>

                        <div class="py-3 pl-3">
                            <h3 class="text-neon-blue font-orbitron mb-3 border-b border-neon-blue/30 pb-1">Toggle Columns</h3>
                            <div class="space-y-1 max-h-[300px] overflow-y-auto pr-3">
                                {columns.filter(col => col !== 'Actions').map((col) => (
                                    <ColumnToggle 
                                        client:load 
                                        columnName={col} 
                                        isVisible={true} 
                                    />
                                ))}
                            </div>
                        </div>
                    </Dropdown>
                ) : column}
            </th>
        ))}
    </tr>
</thead>

<script>
    // Inicializar el estado de las columnas visibles y aplicar cuando el DOM esté listo
    document.addEventListener('DOMContentLoaded', initializeColumnVisibility);
    document.addEventListener('astro:page-load', initializeColumnVisibility);
    
    function initializeColumnVisibility() {
        // Obtener todas las columnas excepto 'Actions'
        const columnNames = Array.from(document.querySelectorAll('th[data-column-name]'))
            .map(th => th.getAttribute('data-column-name'))
            .filter(name => name !== 'Actions');
        
        if (columnNames.length === 0) return; // No hay columnas para manejar
        
        // Inicializar el estado en localStorage si no existe
        if (!localStorage.getItem('visibleColumns')) {
            const initialState: Record<string, boolean> = {};
            columnNames.forEach(name => {
                if (name) initialState[name] = true;
            });
            localStorage.setItem('visibleColumns', JSON.stringify(initialState));
        } else {
            // Asegurarse de que todas las columnas actuales estén en el estado
            const visibleColumns = JSON.parse(localStorage.getItem('visibleColumns') || '{}');
            let updated = false;
            
            columnNames.forEach(name => {
                if (name && visibleColumns[name] === undefined) {
                    visibleColumns[name] = true;
                    updated = true;
                }
            });
            
            if (updated) {
                localStorage.setItem('visibleColumns', JSON.stringify(visibleColumns));
            }
        }
        
        // Aplicar el estado inicial
        applyColumnVisibility();
        
        // Limpiar listeners existentes para evitar duplicados
        document.removeEventListener('columnToggle', handleColumnToggle);
        
        // Configurar los event listeners para los toggles
        document.addEventListener('columnToggle', handleColumnToggle);
    }
    
    function handleColumnToggle(e: any) {
        if (e && e.detail) {
            const { columnName, isVisible } = e.detail;
            if (columnName) {
                // Ya no necesitamos actualizar localStorage aquí porque
                // el componente ColumnToggle lo hace directamente
                applyColumnVisibility();
            }
        }
    }
    
    // Función para aplicar la visibilidad de las columnas
    function applyColumnVisibility() {
        try {
            const visibleColumns = JSON.parse(localStorage.getItem('visibleColumns') || '{}');
            const tables = document.querySelectorAll('.attributes-table');
            
            if (tables.length === 0) return;
            
            tables.forEach(table => {
                // Obtener el índice de cada columna
                const headerCells = Array.from(table.querySelectorAll('th'));
                const columnIndices: Record<string, number> = {};
                
                headerCells.forEach((cell, index) => {
                    const columnName = cell.getAttribute('data-column-name');
                    if (columnName) {
                        columnIndices[columnName] = index;
                    }
                });
                
                // Aplicar visibilidad a las celdas de la tabla
                Object.entries(visibleColumns).forEach(([columnName, isVisible]) => {
                    const columnIndex = columnIndices[columnName];
                    if (columnIndex !== undefined) {
                        // Ocultar/mostrar el encabezado
                        headerCells[columnIndex].style.display = isVisible ? '' : 'none';
                        
                        // Ocultar/mostrar las celdas correspondientes en cada fila
                        const rows = table.querySelectorAll('tbody tr');
                        rows.forEach(row => {
                            const cells = row.querySelectorAll('td');
                            if (cells[columnIndex]) {
                                cells[columnIndex].style.display = isVisible ? '' : 'none';
                            }
                        });
                    }
                });
            });
        } catch (error) {
            console.error('Error applying column visibility:', error);
        }
    }
</script>
