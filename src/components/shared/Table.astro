---
import EditPopup from './EditPopup.astro';

type Header = {
    name: string;
    key: string;
}

export interface Props {
    data: any[];
    headers: Header[];
    type: 'user' | 'attribute' | 'secret' | 'role';
    isEdit?: boolean;
    isDelete?: boolean;
    onEdit?: (item: any) => void;
    onDelete?: (item: any) => void;
}

const { data, headers, type, isEdit = false, isDelete = false } = Astro.props;

// Helper function to format cell content based on header key and item
const getCellContent = (item: any, key: string) => {
    // Handle special cases
    if (key === 'role' && typeof item[key] === 'string') {
        const roleClass = item[key] === 'Admin' ? 'bg-red-900/30 text-red-300' : 
                        item[key] === 'Developer' ? 'bg-blue-900/30 text-blue-300' : 
                        'bg-green-900/30 text-green-300';
        return { value: item[key], isRole: true, roleClass };
    }

    if (key === 'lastLogin' || key === 'created' || key === 'lastUsed') {
        return new Date(item[key]).toLocaleString();
    }

    if (key === 'required' && typeof item[key] === 'boolean') {
        return item[key] ? 'Yes' : 'No';
    }

    if (key === 'permissions' && Array.isArray(item[key])) {
        return item[key].join(', ');
    }
    
    // Default case: return the value as is
    return item[key];
};
---

<table class="attributes-table min-w-full divide-y divide-neon-blue/20">
    <thead class="bg-dark-blue/70">
        <tr>
            {headers.map(header => (
                <th scope="col" class="py-2 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">{header.name}</th>
            ))}
            {(isEdit || isDelete) && (
                <th scope="col" class="py-2 text-right text-xs font-medium text-gray-300 uppercase tracking-wider">Actions</th>
            )}
        </tr>
    </thead>

    <tbody class="divide-y divide-neon-blue/10">
        {data.map(item => (
            <tr class="hover:bg-neon-blue/5">
                {headers.map(header => (
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-white">
                        {(() => {
                            const content = getCellContent(item, header.key);
                            if (typeof content === 'object' && content.isRole) {
                                return (
                                    <span class={`px-2 py-1 text-xs rounded-full ${content.roleClass}`}>
                                        {content.value}
                                    </span>
                                );
                            }
                            return content;
                        })()}
                    </td>
                ))}
                
                {(isEdit || isDelete) && (
                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        {isEdit && (
                            <button 
                                class="edit-item-btn text-neon-blue hover:text-neon-blue/80 mr-3" 
                                data-id={item.id} 
                                data-type={type}
                                data-item={JSON.stringify(item)}
                            >
                                Edit
                            </button>
                        )}
                        
                        {isDelete && (
                            <button 
                                class="delete-item-btn text-red-400 hover:text-red-300"
                                data-id={item.id}
                                data-type={type}
                            >
                                Delete
                            </button>
                        )}
                    </td>
                )}
            </tr>
        ))}
    </tbody>
</table>

{/* Render edit popups for each item */}
{isEdit && data.map(item => (
    <EditPopup id={item.id.toString()} type={type} />
))}

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Delete button functionality
        const deleteButtons = document.querySelectorAll('.delete-item-btn');
        
        deleteButtons.forEach(button => {
            button.addEventListener('click', () => {
                const itemId = button.getAttribute('data-id');
                const itemType = button.getAttribute('data-type');
                
                if (confirm(`Are you sure you want to delete this ${itemType}?`)) {
                    // Dispatch custom event for parent component to handle
                    const event = new CustomEvent('itemDeleted', {
                        detail: {
                            id: itemId,
                            type: itemType
                        }
                    });
                    document.dispatchEvent(event);
                }
            });
        });
    });
</script>