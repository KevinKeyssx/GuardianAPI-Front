---
export interface Props {
    id: string;
    position?: 'left' | 'right';
    width?: string;
    closeOnClick?: boolean;
    menuClass?: string;
}

const { 
    id, 
    position = 'right', 
    width = 'w-48',
    closeOnClick = true,
    menuClass = ''
} = Astro.props;

const positionClass = position === 'left' ? 'left-0' : 'right-0';
---

<div class="relative inline-block text-left" id={`dropdown-container-${id}`}>
    <!-- Trigger button (slot) -->
    <div class="dropdown-trigger cursor-pointer">
        <slot name="trigger" />
    </div>

    <!-- Dropdown menu -->
    <div 
        id={`dropdown-menu-${id}`}
        class={`absolute ${positionClass} mt-2 ${width} origin-top-right bg-dark-blue/90 backdrop-blur-sm border border-neon-blue/30 rounded-md shadow-lg z-50 transform scale-95 opacity-0 invisible transition-all duration-200 ease-in-out ${menuClass}`}
    >
        <div class="p-1 rounded-md overflow-hidden">
            <slot />
        </div>
    </div>
</div>

<script define:vars={{ id, closeOnClick }}>
    (function() {
        let isOpen = false;

        function toggleDropdown(e) {
            e.stopPropagation();

            const dropdownMenu = document.getElementById(`dropdown-menu-${id}`);

            if (!dropdownMenu) return;

            if ( !isOpen ) {
                dropdownMenu.classList.remove('scale-95', 'opacity-0', 'invisible');
                dropdownMenu.classList.add('scale-100', 'opacity-100', 'visible');
                isOpen = true;
            } else {
                closeDropdown();
            }
        }

        function closeDropdown() {
            const dropdownMenu = document.getElementById(`dropdown-menu-${id}`);

            if (!dropdownMenu || !isOpen) return;

            dropdownMenu.classList.remove('opacity-100', 'visible');
            dropdownMenu.classList.add('opacity-0','invisible');
            isOpen = false;
        }

        function handleClickOutside(e) {
            const container = document.getElementById(`dropdown-container-${id}`);

            if (container && !container.contains(e.target) && isOpen) {
                closeDropdown();
            }
        }

        function handleMenuItemClick(e) {
            if (closeOnClick && e.target.closest(`#dropdown-menu-${id}`)) {
                if (!e.target.closest('.dropdown-trigger')) {
                    closeDropdown();
                }
            }
        }

        function initDropdownListeners() {
            const trigger = document.querySelector(`#dropdown-container-${id} .dropdown-trigger`);

            if ( trigger ) {
                trigger.removeEventListener('click', toggleDropdown);
                trigger.addEventListener('click', toggleDropdown);
            }

            document.removeEventListener('click', handleClickOutside);
            document.addEventListener('click', handleClickOutside);

            if ( closeOnClick ) {
                const menu = document.getElementById(`dropdown-menu-${id}`);
                if ( menu ) {
                    menu.removeEventListener('click', handleMenuItemClick);
                    menu.addEventListener('click', handleMenuItemClick);
                }
            }
        }

        document.addEventListener('DOMContentLoaded', initDropdownListeners);
        document.addEventListener('astro:page-load', initDropdownListeners);

        window[`openDropdown_${id}`] = function() {
            const dropdownMenu = document.getElementById(`dropdown-menu-${id}`);

            if ( dropdownMenu && !isOpen ) {
                dropdownMenu.classList.remove('scale-95', 'opacity-0', 'invisible');
                dropdownMenu.classList.add('scale-100', 'opacity-100', 'visible');
                isOpen = true;
            }
        };

        window[`closeDropdown_${id}`] = closeDropdown;
        window[`toggleDropdown_${id}`] = toggleDropdown;
    })();
</script>